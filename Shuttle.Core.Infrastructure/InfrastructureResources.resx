<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigurationItemEmptyUsingDefault" xml:space="preserve">
    <value>Configuration item '{0}' is specified but empty.  Using the specified default '{1}'.</value>
    <comment>{0} = configuration item name, {1} = specified default</comment>
  </data>
  <data name="ConfigurationItemMissing" xml:space="preserve">
    <value>Application setting '{0}' is missing or has an empty value.</value>
    <comment>{0} = requested setting in application configuration file</comment>
  </data>
  <data name="ConfigurationItemMissingUsingDefault" xml:space="preserve">
    <value>configuration item not specified - using default</value>
  </data>
  <data name="EmptyStringException" xml:space="preserve">
    <value>The string with name '{0}' may not be empty.</value>
    <comment>{0} = string name</comment>
  </data>
  <data name="TraceGetTypesFromAssembly" xml:space="preserve">
    <value>Retrieving all types from from assembly '{0}'.</value>
    <comment>{0} = assembly</comment>
  </data>
  <data name="InvalidArgumentException" xml:space="preserve">
    <value>There is no argument with name '{0}'.</value>
    <comment>{0} = name of the requested argument</comment>
  </data>
  <data name="InvalidGuardExceptionType" xml:space="preserve">
    <value>Exception type '{0}' used with Guard possibly does not have a constructor that takes 1 string parameter (message).  Exception reported: {1}</value>
    <comment>{0} = full type name of exception type, {1} = actual exception thrown</comment>
  </data>
  <data name="NullValueException" xml:space="preserve">
    <value>Value with name '{0}' may not be null.</value>
    <comment>{0} = value name</comment>
  </data>
  <data name="ReassignmentException" xml:space="preserve">
    <value>Attempt to assign a value to '{0}' but it has already been assigned a value.</value>
    <comment>{0} = name of variable that cannot be reassigned a value</comment>
  </data>
  <data name="StreamCannotSeek" xml:space="preserve">
    <value>[{0}] : Stream position is not 0 but seek is not permitted.</value>
    <comment>{0} = source</comment>
  </data>
  <data name="AssemblyLoadException" xml:space="preserve">
    <value>[GetAssembly] : could not load assembly '{0}' / exception = {1}</value>
    <comment>{0} = assembly, {1} = exception</comment>
  </data>
  <data name="EnteringPipelineStage" xml:space="preserve">
    <value>Entering pipeline stage '{0}'.</value>
    <comment>{0} = pipeline stage</comment>
  </data>
  <data name="ExecutingPipeline" xml:space="preserve">
    <value>Executing pipeline '{0}'.</value>
    <comment>{0} = pipeline full type name</comment>
  </data>
  <data name="FirstChanceExceptionHandledByPipeline" xml:space="preserve">
    <value>First chance exception handled by pipeline: {0}</value>
    <comment>{0} = exception message</comment>
  </data>
  <data name="PipelineStageEventNotRegistered" xml:space="preserve">
    <value>Pipeline stage '{0}' has no event of type '{1}'.</value>
    <comment>{0} = pipeline stage name, {1} = unknown event type name</comment>
  </data>
  <data name="PipelineStageNotFound" xml:space="preserve">
    <value>There is no pipeline stage with a name of '{0}'.</value>
    <comment>{0} = unknown stage name</comment>
  </data>
  <data name="ProcessorExecuting" xml:space="preserve">
    <value>[processor thread executing] : managed thread id = {0} / processor type = {1}</value>
    <comment>{0} = managed thread id, {1} = full type name of processor</comment>
  </data>
  <data name="ProcessorThreadActive" xml:space="preserve">
    <value>[processor thread active] : managed thread id = {0} / processor type = {1}</value>
    <comment>{0} = managed thread id, {1} = full type name of processor</comment>
  </data>
  <data name="ProcessorThreadStarting" xml:space="preserve">
    <value>[processor thread starting] : managed thread id = {0} / processor type = {1}</value>
    <comment>{0} = managed thread id, {1} = full type name of processor</comment>
  </data>
  <data name="ProcessorThreadStopped" xml:space="preserve">
    <value>[processor thread stopped] : managed thread id = {0} / processor type = {1}</value>
    <comment>{0} = managed thread id, {1} = full type name of processor</comment>
  </data>
  <data name="ProcessorThreadStopping" xml:space="preserve">
    <value>[processor thread stopping] : managed thread id = {0} / processor type = {1}</value>
    <comment>{0} = managed thread id, {1} = full type name of processor</comment>
  </data>
  <data name="VerboseRaisingPipelineEvent" xml:space="preserve">
    <value>Raising pipeline event '{0}' in stage '{1}' for observer '{2}'.</value>
    <comment>{0} = pipeline event name, {1} = pipeline stage name, {2} = observer name</comment>
  </data>
  <data name="ThreadCountZeroException" xml:space="preserve">
    <value>The queue handler configuration requires thread count of at least 1.  The input queue can not be processed.</value>
  </data>
  <data name="ThreadPoolStatusChange" xml:space="preserve">
    <value>Thread pool '{0}' has {1} successfully.</value>
    <comment>{0} = thread pool name , {1} = new status</comment>
  </data>
  <data name="UnhandledPipelineException" xml:space="preserve">
    <value>Unhandled exception during event '{0}': {1}</value>
    <comment>{0} = event name, {1} = exception message</comment>
  </data>
  <data name="StringDurationFormatError" xml:space="preserve">
    <value>String duration contains invalid items '{0}'.</value>
    <comment>{0} = string containing invalid format</comment>
  </data>
  <data name="VerboseTransactionScopeAmbient" xml:space="preserve">
    <value>TransactionScope ('{0}') using ambient transaction.</value>
    <comment>{0} = transaction scope name</comment>
  </data>
  <data name="VerboseTransactionScopeAmbientCompleted" xml:space="preserve">
    <value>TransactionScope ('{0}') using ambient transaction has completed.</value>
    <comment>{0} = transaction scope name</comment>
  </data>
  <data name="VerboseTransactionScopeCompleted" xml:space="preserve">
    <value>TransactionScope ('{0}') has completed.</value>
    <comment>{0} = transaction scope name</comment>
  </data>
  <data name="VerboseTransactionScopeCreated" xml:space="preserve">
    <value>TransactionScope ('{0}') created with isolation level '{1}' and timeout of '{2}'.</value>
    <comment>{0} = transaction scope name, {1} = isolation level, {2} = timeout</comment>
  </data>
  <data name="DefaultConstructorRequired" xml:space="preserve">
    <value>{0} '{1}' has no default constructor.</value>
    <comment>{0} = name of required instance, {1} = full type name</comment>
  </data>
  <data name="TripleDESKeyMissing" xml:space="preserve">
    <value>The TripleDES section in the application configuration file may not have an empty value for the 'key' attribute.</value>
  </data>
  <data name="TripleDESSectionMissing" xml:space="preserve">
    <value>In order to use TripleDES cryptography you need to add the 'tripleDES' section to the application configuration file.  Remember to add the section handler.</value>
  </data>
  <data name="DuplicateTypeRegistrationException" xml:space="preserve">
    <value>An implementation type has already been registered for service type '{0}'. </value>
    <comment>{0} = full type name of the service type to register</comment>
  </data>
  <data name="DuplicatePipelineInstanceException" xml:space="preserve">
    <value>The IComponentResolver implementation returned the same pipeline instance of type '{0}'.  Since pipelines are not stateless that cannot be shared.  Please register the pipeline types as transient.</value>
    <comment>{0} = pipeline type</comment>
  </data>
  <data name="UnknownEnumValueException" xml:space="preserve">
    <value>Enum type '{0}' does not contain a value '{1}'.</value>
    <comment>{0} = enum type, {1} = value not in enum</comment>
  </data>
  <data name="TypeNotRegisteredException" xml:space="preserve">
    <value>No implementation type has been registered for service type '{0}'.</value>
    <comment>{0} = service type full name</comment>
  </data>
  <data name="UnassignableTypeRegistrationException" xml:space="preserve">
    <value>Cannot register service type '{0}' as the implementation type '{1}' is not of that type.</value>
    <comment>{0} = service type full name, {1} = implementation type full name</comment>
  </data>
  <data name="NullPipelineException" xml:space="preserve">
    <value>The IComponentResolver implementation returned null for pipeline of type '{0}'.</value>
    <comment>{0} = full type name of pipeline requested</comment>
  </data>
  <data name="NullDependencyException" xml:space="preserve">
    <value>Required dependency of type '{0}' is null.</value>
    <comment>{0} = dependency full type name</comment>
  </data>
  <data name="ResolveException" xml:space="preserve">
    <value>Cannot resolve type '{0}' since there is no single implementation.</value>
    <comment>{0} = the full type name of the service type to resolve</comment>
  </data>
  <data name="InvalidNamedTypeRegistrationException" xml:space="preserve">
    <value>There is already an unnamed registration for service type '{0}'.</value>
    <comment>{0} = full type name of service type</comment>
  </data>
  <data name="DuplicateNamedTypeRegistrationException" xml:space="preserve">
    <value>There is already a registration named '{0}' for service type '{1}'.</value>
    <comment>{0} = name, {1} = full type name of service type</comment>
  </data>
  <data name="ResolveNameException" xml:space="preserve">
    <value>There is no registration named '{0}' for service type '{1}'.</value>
    <comment>{0} = name, {1} = full type name of service type</comment>
  </data>
</root>